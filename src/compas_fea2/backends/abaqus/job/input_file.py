from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__all__ = [
    'InputFile',
]

class InputFile():

    def __init__(self, structure, path):
        self.name           = structure.name
        self.job_name       = structure.name
        self.path           = path
        self.heading="""** {}
*Heading
** Job name: {}
** Generated by: compas_fea2
*Preprint, echo=NO, history=NO, contact=NO
*PHYSICAL CONSTANTS, ABSOLUTE ZERO=-273.15, STEFAN BOLTZMANN=5.67e-8
**\n""".format(self.name, self.job_name)

        self.parts          = self._generate_part_section(structure)
        self.assembly       = self._generate_assembly_section(structure)
        self.materials      = self._generate_material_section(structure)
        self.int_props      = self._generate_int_props_section(structure)
        self.interactions   = self._generate_interactions_section(structure)
        self.bcs            = self._generate_bcs_section(structure)
        self.steps          = self._generate_steps_section(structure)

        self.data           = self._generate_data()

    # ==============================================================================
    # Constructor methods
    # ==============================================================================

    def _generate_part_section(self, structure):
        header = """** PARTS\n**\n"""
        section_data = [header]
        for part in structure.parts:
            section_data.append(part.data)
        return ''.join(section_data)

    def _generate_assembly_section(self, structure):
        return structure.assembly.data

    def _generate_material_section(self, structure):
        header = """** MATERIALS\n**\n"""
        section_data = [header]
        for material in structure.assembly.materials:
            section_data.append(material.data)
        return ''.join(section_data)

    def _generate_int_props_section(self, structure):
        # # Write interaction properties
        # for interaction_property in self.interaction_properties:
        #     interaction_property.write_data_line(f)
        return ''

    def _generate_interactions_section(self, structure):
        #
        # # Write interactions
        # for interaction in self.interactions:
        #     interaction.write_data_line(f)
        return ''

    def _generate_bcs_section(self, structure):
        header = """**\n** BOUNDARY\n**\n"""
        section_data = [header]
        for bc in structure.bcs:
            section_data.append(bc.data)
        return ''.join(section_data)

    def _generate_steps_section(self, structure):
        header = """**\n"""
        section_data = [header]
        for step in structure.steps:
            section_data.append(step.data)
        return ''.join(section_data)

    def _generate_data(self):
        return ''.join([self.heading, self.parts, self.assembly,
                       self.materials, self.int_props, self.interactions, self.bcs, self.steps])

    # ==============================================================================
    # General methods
    # ==============================================================================

    def write_to_file(self):
        with open(self.path, 'w') as f:
            f.writelines(self.data)


if __name__ == "__main__":
    from compas_fea2.backends.abaqus.components import Node
    from compas_fea2.backends.abaqus.components import Concrete
    from compas_fea2.backends.abaqus.components import ElasticIsotropic
    from compas_fea2.backends.abaqus.components import BoxSection
    from compas_fea2.backends.abaqus.components import SolidSection
    from compas_fea2.backends.abaqus.components import BeamElement
    from compas_fea2.backends.abaqus.components import SolidElement
    from compas_fea2.backends.abaqus.components import FixedDisplacement
    from compas_fea2.backends.abaqus.components import RollerDisplacementXZ
    from compas_fea2.backends.abaqus.components import Part
    from compas_fea2.backends.abaqus.components import Set
    from compas_fea2.backends.abaqus.components import Assembly
    from compas_fea2.backends.abaqus.components import Instance
    from compas_fea2.backends.abaqus.components import GeneralStaticStep
    from compas_fea2.backends.abaqus.components import PointLoad
    from compas_fea2.backends.abaqus.components import FieldOutput

    from compas_fea2.backends.abaqus import Structure

    nodes = []
    nodes.append(Node(1,[0.0, 0.0, 0.0]))
    nodes.append(Node(2,[1000.0, 0.0, 0.0]))
    nodes.append(Node(3,[1000.0, 1000.0, 0.0]))
    nodes.append(Node(4,[0.0, 1000.0, 0.0]))


    # material_one = Concrete('my_mat',1,2,3,4)
    mat1 = ElasticIsotropic(name='mat1',E=29000,v=0.17,p=2.5e-9)
    mat2 = ElasticIsotropic(name='mat2',E=25000,v=0.17,p=2.4e-9)

    section_A = SolidSection(name='section_A', material=mat1)
    section_B = BoxSection(name='section_B', material=mat2, a=100, b=200, t1=10, t2=10, t3=10, t4=10)

    elements = []
    elements.append(BeamElement(1, [nodes[0], nodes[1]], section_B))
    elements.append(BeamElement(2, [nodes[1], nodes[2]], section_B))
    elements.append(BeamElement(3, [nodes[2], nodes[3]], section_B))
    elements.append(BeamElement(4, [nodes[3], nodes[0]], section_B))

    part1 = Part(name='part-1', nodes=nodes, elements=elements)

    nset_fixed = Set('fixed', [nodes[0], nodes[3]])
    nset_roller = Set('roller', [nodes[1]])
    nset_pload = Set('pload', [nodes[2]])

    sets = [nset_fixed, nset_roller, nset_pload]
    instance1 = Instance(name='test_instance', part=part1, sets=sets)
    assembly = Assembly(name='part-1', instances=[instance1])

    bc1 = RollerDisplacementXZ('bc_roller',nset_roller)
    bc2 = FixedDisplacement('bc_fix', nset_fixed)

    pload1 = PointLoad('pload1', nset_pload, 100)

    fout = FieldOutput('my_fout')
    step = GeneralStaticStep('gstep', loads=[pload1], field_output=[fout])
    # my_structure = Structure('test_structure', [my_part], my_assembly, [], [d1,d2], [step])
    my_structure = Structure('test_structure', [part1], assembly, [], [bc1, bc2], [step])
    my_structure.write_input_file(path='C:/temp')
