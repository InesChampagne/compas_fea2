"""
Comments SB 03/02/2021

    - SOFiSTiK element grouping needs to be addressed: to group only externally through frontend ('Sets'),
        or to translate also the grouping into SOFiSTiK internally?

    - at SOFiSTiK runtime, the definition of a sofimshA module without an explicit reset
        will restart the geometry definition from scratch. An automated mechanism should be implemented.

    - a way for default module settings to be included - and intuitively adjusted - needs to be thought out.

    - make sure all input text lines are well justified in columns so input files are readable and easily changed.

"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os.path

__all__ = [
    "InputFile"
]


class InputFile:
    """Sofistik Input file."""

    def __init__(self, model):
        self.model = model
        self._jobdata = self._generate_data()

    @property
    def jobdata(self):
        """This property is the representation of the object in a software-specific inout file.

        Returns
        -------
        str

        Examples
        --------
        >>>
        """
        return self._jobdata

    # ==============================================================================
    # Constructor methods
    # ==============================================================================

    def _generate_data(self):
        header = """$ Job name: {}
$ Generated by: compas_fea2

""".format(self.model.name)

        materials = self._generate_materials_sections()
        geometry = self._generate_geometry()
        bcs = self._generate_boundary_conditions()
        loads = self._generate_load_cases()
        analyses = self._generate_analyses()
        stresses = self._generate_stresses()

        return "\n".join((header, materials, geometry, bcs, loads, analyses, stresses))

    def _generate_materials_sections(self):
        material_data = "\n".join(mat._generate_data() for mat in self.model.materials)
        section_data = "\n".join(sec._generate_data() for sec in self.model.sections)
        parsed_data = "\n\n".join((material_data, section_data))
        module_data = self._generate_aqua_module(parsed_data)
        return module_data

    def _generate_geometry(self):
        node_data = "\n".join(node._generate_data() for node in self.model.nodes)
        beam_data = "\n".join(beam._generate_data() for beam in self.model.beams)
        parsed_data = "\n\n".join((node_data, beam_data))
        module_data = self._generate_sofimsha_module(parsed_data, continue_model=False)
        return module_data

    def _generate_boundary_conditions(self):
        bcs_data = "\n".join(bc._generate_data() for bc in self.model.boundary_conditions)
        module_data = self._generate_sofimsha_module(bcs_data, continue_model=True, name="constraints")
        return module_data

    def _generate_load_cases(self):
        load_cases_data = (lc._generate_data() for lc in self.model.load_cases)
        load_cases_names = (lc.name for lc in self.model.load_cases)
        modules = (self._generate_sofiload_module(lc_data, name=lc_name)
                   for lc_data, lc_name in zip(load_cases_data, load_cases_names))
        modules_data = "\n".join(modules)
        return modules_data

    def _generate_analyses(self):
        analyses_data = (al._generate_data() for al in self.model.analyses)
        analyses_names = (al.name for al in self.model.analyses)
        modules = (self._generate_ase_module(al_data, name=al_name)
                   for al_data, al_name in zip(analyses_data, analyses_names))
        modules_data = "\n".join(modules)
        return modules_data

    def _generate_stresses(self):
        stress_data = "\n".join(st._generate_data() for st in self.model.stresses)
        module_data = self._generate_aqb_module(stress_data)
        return module_data

    # ==============================================================================
    # General methods
    # ==============================================================================

    def write_to_file(self, path):
        """Write the InputFile to a file in a specified location."""
        try:
            filepath = os.path.join(path, self.model.name + ".dat")
            with open(filepath, 'w') as f:
                f.writelines(self._generate_data())
            r = "***** Input file generated in: {0} *****\n".format(filepath)
        except:
            r = "***** ERROR: Input file not generated *****"
        return r

    # ==============================================================================
    # Module parsing methods
    # ==============================================================================

    def __generate_module(self, module_type, content, settings=None, title=None):
        """Generic module parsing template."""
        header = "+prog {0}\nhead {1}".format(module_type, title)
        return "\n".join((header, settings, content, "\nend\n\n"))

    def _generate_aqua_module(self, content, name=None):
        """Parse Aqua module for material and section definitions."""
        settings = "page lano 1\npage unii 0\n"
        title = name or "materials and sections"
        return self.__generate_module("aqua", content, settings, title)

    def _generate_sofimsha_module(self, content, name=None, continue_model=True):
        """Parse SofimshA module for input geometry."""
        settings = ("syst rest\nctrl rest 2\n" if continue_model
                    else "syst spac  gdiv 1000000  gdir negz\nunit 5")
        title = name or "geometry"
        return self.__generate_module("sofimsha", content, settings, title)

    def _generate_sofiload_module(self, content, name=None, tolerance=1.0):
        """Parse Sofiload module for single load case."""
        settings = "unit 5\nctrl gtol {}[mm]\n".format(tolerance)
        title = name or "loading"
        return self.__generate_module("sofiload", content, settings, title)

    def _generate_ase_module(self, content, name=None):
        """Parse ASE module for analysis."""
        settings = "ctrl solv 4\n"
        title = name or "analysis"
        return self.__generate_module("ase", content, settings, title)

    def _generate_aqb_module(self, content, name=None):
        """Parse AQB module for stress interpolation."""
        settings = "beam type beam\n"
        title = name or "stress interpolation"
        return self.__generate_module("aqb", content, settings, title)

    def _generate_maxima_module(self, content, name=None):
        """Parse Maxima module for envelopes."""
        settings = "comb 1 extr nonl type none\n"
        title = name or "evelopes"
        return self.__generate_module("maxima", content, settings, title)


if __name__ == "__main__":
    pass
